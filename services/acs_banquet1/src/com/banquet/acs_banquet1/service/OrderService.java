/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet1.Order;
import com.banquet.acs_banquet1.OrderItem;

/**
 * Service object for domain model class {@link Order}.
 */
public interface OrderService {

    /**
     * Creates a new Order. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Order if any.
     *
     * @param _order Details of the Order to be created; value cannot be null.
     * @return The newly created Order.
     */
	Order create(@Valid Order _order);


	/**
	 * Returns Order by given id if exists.
	 *
	 * @param orderId The id of the Order to get; value cannot be null.
	 * @return Order associated with the given orderId.
     * @throws EntityNotFoundException If no Order is found.
	 */
	Order getById(Integer orderId) throws EntityNotFoundException;

    /**
	 * Find and return the Order by given id if exists, returns null otherwise.
	 *
	 * @param orderId The id of the Order to get; value cannot be null.
	 * @return Order associated with the given orderId.
	 */
	Order findById(Integer orderId);


	/**
	 * Updates the details of an existing Order. It replaces all fields of the existing Order with the given _order.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Order if any.
     *
	 * @param _order The details of the Order to be updated; value cannot be null.
	 * @return The updated Order.
	 * @throws EntityNotFoundException if no Order is found with given input.
	 */
	Order update(@Valid Order _order) throws EntityNotFoundException;

    /**
	 * Deletes an existing Order with the given id.
	 *
	 * @param orderId The id of the Order to be deleted; value cannot be null.
	 * @return The deleted Order.
	 * @throws EntityNotFoundException if no Order found with the given id.
	 */
	Order delete(Integer orderId) throws EntityNotFoundException;

    /**
	 * Deletes an existing Order with the given object.
	 *
	 * @param _order The instance of the Order to be deleted; value cannot be null.
	 */
	void delete(Order _order);

	/**
	 * Find all Orders matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Orders.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Order> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Orders matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Orders.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Order> findAll(String query, Pageable pageable);

    /**
	 * Exports all Orders matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Orders in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Order.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated orderItems for given Order id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated OrderItem instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<OrderItem> findAssociatedOrderItems(Integer id, Pageable pageable);

}


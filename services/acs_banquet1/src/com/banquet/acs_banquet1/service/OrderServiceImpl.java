/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet1.Order;
import com.banquet.acs_banquet1.OrderItem;


/**
 * ServiceImpl object for domain model class Order.
 *
 * @see Order
 */
@Service("acs_banquet1.OrderService")
@Validated
public class OrderServiceImpl implements OrderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("acs_banquet1.OrderItemService")
	private OrderItemService orderItemService;

    @Autowired
    @Qualifier("acs_banquet1.OrderDao")
    private WMGenericDao<Order, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Order, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
    @Override
	public Order create(Order _order) {
        LOGGER.debug("Creating a new Order with information: {}", _order);

        List<OrderItem> orderItems = _order.getOrderItems();

        if(orderItems != null && Hibernate.isInitialized(orderItems)) {
            if(!orderItems.isEmpty()) {
                for(OrderItem _orderItem : orderItems) {
                    _orderItem.set_order(_order);
                }
            }
        }

        Order _orderCreated = this.wmGenericDao.create(_order);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(_orderCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Order getById(Integer orderId) throws EntityNotFoundException {
        LOGGER.debug("Finding Order by id: {}", orderId);
        return this.wmGenericDao.findById(orderId);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Order findById(Integer orderId) {
        LOGGER.debug("Finding Order by id: {}", orderId);
        try {
            return this.wmGenericDao.findById(orderId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Order found with id: {}", orderId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquet1TransactionManager")
	@Override
	public Order update(Order _order) throws EntityNotFoundException {
        LOGGER.debug("Updating Order with information: {}", _order);

        List<OrderItem> orderItems = _order.getOrderItems();

        if(orderItems != null && Hibernate.isInitialized(orderItems)) {
            if(!orderItems.isEmpty()) {
                for(OrderItem _orderItem : orderItems) {
                    _orderItem.set_order(_order);
                }
            }
        }

        this.wmGenericDao.update(_order);
        this.wmGenericDao.refresh(_order);

        // Deleting children which are not present in the list.
        if(orderItems != null && Hibernate.isInitialized(orderItems) && !orderItems.isEmpty()) {
            List<OrderItem> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, OrderItem.class,
                        new DaoUtils.ChildrenFilter("_order", _order, orderItems)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(OrderItem _orderItem : _remainingChildren) {
                orderItemService.delete(_orderItem);
            }
            _order.setOrderItems(orderItems);
        }

        return _order;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public Order delete(Integer orderId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Order with id: {}", orderId);
        Order deleted = this.wmGenericDao.findById(orderId);
        if (deleted == null) {
            LOGGER.debug("No Order found with id: {}", orderId);
            throw new EntityNotFoundException(String.valueOf(orderId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public void delete(Order _order) {
        LOGGER.debug("Deleting Order with {}", _order);
        this.wmGenericDao.delete(_order);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Page<Order> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Orders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<Order> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Orders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet1 for table Order to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<OrderItem> findAssociatedOrderItems(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated orderItems");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("_order.id = '" + id + "'");

        return orderItemService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrderItemService instance
	 */
	protected void setOrderItemService(OrderItemService service) {
        this.orderItemService = service;
    }

}


/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet1.OrderItem;
import com.banquet.acs_banquet1.PackageEntity;
import com.banquet.acs_banquet1.PreOrder;


/**
 * ServiceImpl object for domain model class PackageEntity.
 *
 * @see PackageEntity
 */
@Service("acs_banquet1.PackageEntityService")
@Validated
public class PackageEntityServiceImpl implements PackageEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PackageEntityServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("acs_banquet1.OrderItemService")
	private OrderItemService orderItemService;

    @Lazy
    @Autowired
	@Qualifier("acs_banquet1.PreOrderService")
	private PreOrderService preOrderService;

    @Autowired
    @Qualifier("acs_banquet1.PackageEntityDao")
    private WMGenericDao<PackageEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PackageEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
    @Override
	public PackageEntity create(PackageEntity packageEntity) {
        LOGGER.debug("Creating a new PackageEntity with information: {}", packageEntity);

        List<PreOrder> preOrders = packageEntity.getPreOrders();
        List<OrderItem> orderItems = packageEntity.getOrderItems();

        if(preOrders != null && Hibernate.isInitialized(preOrders)) {
            if(!preOrders.isEmpty()) {
                for(PreOrder _preOrder : preOrders) {
                    _preOrder.setPackageEntity(packageEntity);
                }
            }
        }

        if(orderItems != null && Hibernate.isInitialized(orderItems)) {
            if(!orderItems.isEmpty()) {
                for(OrderItem _orderItem : orderItems) {
                    _orderItem.setPackageEntity(packageEntity);
                }
            }
        }

        PackageEntity packageEntityCreated = this.wmGenericDao.create(packageEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(packageEntityCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public PackageEntity getById(Integer packageentityId) throws EntityNotFoundException {
        LOGGER.debug("Finding PackageEntity by id: {}", packageentityId);
        return this.wmGenericDao.findById(packageentityId);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public PackageEntity findById(Integer packageentityId) {
        LOGGER.debug("Finding PackageEntity by id: {}", packageentityId);
        try {
            return this.wmGenericDao.findById(packageentityId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No PackageEntity found with id: {}", packageentityId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquet1TransactionManager")
	@Override
	public PackageEntity update(PackageEntity packageEntity) throws EntityNotFoundException {
        LOGGER.debug("Updating PackageEntity with information: {}", packageEntity);

        List<PreOrder> preOrders = packageEntity.getPreOrders();
        List<OrderItem> orderItems = packageEntity.getOrderItems();

        if(preOrders != null && Hibernate.isInitialized(preOrders)) {
            if(!preOrders.isEmpty()) {
                for(PreOrder _preOrder : preOrders) {
                    _preOrder.setPackageEntity(packageEntity);
                }
            }
        }

        if(orderItems != null && Hibernate.isInitialized(orderItems)) {
            if(!orderItems.isEmpty()) {
                for(OrderItem _orderItem : orderItems) {
                    _orderItem.setPackageEntity(packageEntity);
                }
            }
        }

        this.wmGenericDao.update(packageEntity);
        this.wmGenericDao.refresh(packageEntity);

        // Deleting children which are not present in the list.
        if(preOrders != null && Hibernate.isInitialized(preOrders) && !preOrders.isEmpty()) {
            List<PreOrder> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, PreOrder.class,
                        new DaoUtils.ChildrenFilter("packageEntity", packageEntity, preOrders)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(PreOrder _preOrder : _remainingChildren) {
                preOrderService.delete(_preOrder);
            }
            packageEntity.setPreOrders(preOrders);
        }

        // Deleting children which are not present in the list.
        if(orderItems != null && Hibernate.isInitialized(orderItems) && !orderItems.isEmpty()) {
            List<OrderItem> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, OrderItem.class,
                        new DaoUtils.ChildrenFilter("packageEntity", packageEntity, orderItems)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(OrderItem _orderItem : _remainingChildren) {
                orderItemService.delete(_orderItem);
            }
            packageEntity.setOrderItems(orderItems);
        }

        return packageEntity;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public PackageEntity delete(Integer packageentityId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PackageEntity with id: {}", packageentityId);
        PackageEntity deleted = this.wmGenericDao.findById(packageentityId);
        if (deleted == null) {
            LOGGER.debug("No PackageEntity found with id: {}", packageentityId);
            throw new EntityNotFoundException(String.valueOf(packageentityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public void delete(PackageEntity packageEntity) {
        LOGGER.debug("Deleting PackageEntity with {}", packageEntity);
        this.wmGenericDao.delete(packageEntity);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Page<PackageEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PackageEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<PackageEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PackageEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet1 for table PackageEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<PreOrder> findAssociatedPreOrders(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated preOrders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("packageEntity.id = '" + id + "'");

        return preOrderService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<OrderItem> findAssociatedOrderItems(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated orderItems");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("packageEntity.id = '" + id + "'");

        return orderItemService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrderItemService instance
	 */
	protected void setOrderItemService(OrderItemService service) {
        this.orderItemService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PreOrderService instance
	 */
	protected void setPreOrderService(PreOrderService service) {
        this.preOrderService = service;
    }

}


/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet1.PreOrder;


/**
 * ServiceImpl object for domain model class PreOrder.
 *
 * @see PreOrder
 */
@Service("acs_banquet1.PreOrderService")
@Validated
public class PreOrderServiceImpl implements PreOrderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PreOrderServiceImpl.class);


    @Autowired
    @Qualifier("acs_banquet1.PreOrderDao")
    private WMGenericDao<PreOrder, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PreOrder, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
    @Override
	public PreOrder create(PreOrder preOrder) {
        LOGGER.debug("Creating a new PreOrder with information: {}", preOrder);

        PreOrder preOrderCreated = this.wmGenericDao.create(preOrder);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(preOrderCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public PreOrder getById(Integer preorderId) throws EntityNotFoundException {
        LOGGER.debug("Finding PreOrder by id: {}", preorderId);
        return this.wmGenericDao.findById(preorderId);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public PreOrder findById(Integer preorderId) {
        LOGGER.debug("Finding PreOrder by id: {}", preorderId);
        try {
            return this.wmGenericDao.findById(preorderId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No PreOrder found with id: {}", preorderId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquet1TransactionManager")
	@Override
	public PreOrder update(PreOrder preOrder) throws EntityNotFoundException {
        LOGGER.debug("Updating PreOrder with information: {}", preOrder);

        this.wmGenericDao.update(preOrder);
        this.wmGenericDao.refresh(preOrder);

        return preOrder;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public PreOrder delete(Integer preorderId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PreOrder with id: {}", preorderId);
        PreOrder deleted = this.wmGenericDao.findById(preorderId);
        if (deleted == null) {
            LOGGER.debug("No PreOrder found with id: {}", preorderId);
            throw new EntityNotFoundException(String.valueOf(preorderId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public void delete(PreOrder preOrder) {
        LOGGER.debug("Deleting PreOrder with {}", preOrder);
        this.wmGenericDao.delete(preOrder);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Page<PreOrder> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PreOrders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<PreOrder> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PreOrders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet1 for table PreOrder to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


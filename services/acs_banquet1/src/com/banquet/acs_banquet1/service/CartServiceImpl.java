/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet1.Cart;


/**
 * ServiceImpl object for domain model class Cart.
 *
 * @see Cart
 */
@Service("acs_banquet1.CartService")
@Validated
public class CartServiceImpl implements CartService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CartServiceImpl.class);


    @Autowired
    @Qualifier("acs_banquet1.CartDao")
    private WMGenericDao<Cart, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Cart, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
    @Override
	public Cart create(Cart cart) {
        LOGGER.debug("Creating a new Cart with information: {}", cart);

        Cart cartCreated = this.wmGenericDao.create(cart);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cartCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Cart getById(Integer cartId) throws EntityNotFoundException {
        LOGGER.debug("Finding Cart by id: {}", cartId);
        return this.wmGenericDao.findById(cartId);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Cart findById(Integer cartId) {
        LOGGER.debug("Finding Cart by id: {}", cartId);
        try {
            return this.wmGenericDao.findById(cartId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Cart found with id: {}", cartId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquet1TransactionManager")
	@Override
	public Cart update(Cart cart) throws EntityNotFoundException {
        LOGGER.debug("Updating Cart with information: {}", cart);

        this.wmGenericDao.update(cart);
        this.wmGenericDao.refresh(cart);

        return cart;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public Cart delete(Integer cartId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Cart with id: {}", cartId);
        Cart deleted = this.wmGenericDao.findById(cartId);
        if (deleted == null) {
            LOGGER.debug("No Cart found with id: {}", cartId);
            throw new EntityNotFoundException(String.valueOf(cartId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public void delete(Cart cart) {
        LOGGER.debug("Deleting Cart with {}", cart);
        this.wmGenericDao.delete(cart);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Page<Cart> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Carts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<Cart> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Carts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet1 for table Cart to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


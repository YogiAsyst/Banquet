/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet1.OrderItem;


/**
 * ServiceImpl object for domain model class OrderItem.
 *
 * @see OrderItem
 */
@Service("acs_banquet1.OrderItemService")
@Validated
public class OrderItemServiceImpl implements OrderItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderItemServiceImpl.class);


    @Autowired
    @Qualifier("acs_banquet1.OrderItemDao")
    private WMGenericDao<OrderItem, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OrderItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
    @Override
	public OrderItem create(OrderItem orderItem) {
        LOGGER.debug("Creating a new OrderItem with information: {}", orderItem);

        OrderItem orderItemCreated = this.wmGenericDao.create(orderItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(orderItemCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public OrderItem getById(Integer orderitemId) throws EntityNotFoundException {
        LOGGER.debug("Finding OrderItem by id: {}", orderitemId);
        return this.wmGenericDao.findById(orderitemId);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public OrderItem findById(Integer orderitemId) {
        LOGGER.debug("Finding OrderItem by id: {}", orderitemId);
        try {
            return this.wmGenericDao.findById(orderitemId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No OrderItem found with id: {}", orderitemId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquet1TransactionManager")
	@Override
	public OrderItem update(OrderItem orderItem) throws EntityNotFoundException {
        LOGGER.debug("Updating OrderItem with information: {}", orderItem);

        this.wmGenericDao.update(orderItem);
        this.wmGenericDao.refresh(orderItem);

        return orderItem;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public OrderItem delete(Integer orderitemId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OrderItem with id: {}", orderitemId);
        OrderItem deleted = this.wmGenericDao.findById(orderitemId);
        if (deleted == null) {
            LOGGER.debug("No OrderItem found with id: {}", orderitemId);
            throw new EntityNotFoundException(String.valueOf(orderitemId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquet1TransactionManager")
	@Override
	public void delete(OrderItem orderItem) {
        LOGGER.debug("Deleting OrderItem with {}", orderItem);
        this.wmGenericDao.delete(orderItem);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public Page<OrderItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OrderItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Page<OrderItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OrderItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet1 for table OrderItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquet1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


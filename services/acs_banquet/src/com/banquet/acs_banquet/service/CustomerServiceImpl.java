/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.Customer;
import com.banquet.acs_banquet.Order;


/**
 * ServiceImpl object for domain model class Customer.
 *
 * @see Customer
 */
@Service("acs_banquet.CustomerService")
@Validated
public class CustomerServiceImpl implements CustomerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("acs_banquet.OrderService")
	private OrderService orderService;

    @Autowired
    @Qualifier("acs_banquet.CustomerDao")
    private WMGenericDao<Customer, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Customer, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquetTransactionManager")
    @Override
	public Customer create(Customer customer) {
        LOGGER.debug("Creating a new Customer with information: {}", customer);

        Customer customerCreated = this.wmGenericDao.create(customer);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(customerCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Customer getById(Integer customerId) throws EntityNotFoundException {
        LOGGER.debug("Finding Customer by id: {}", customerId);
        return this.wmGenericDao.findById(customerId);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Customer findById(Integer customerId) {
        LOGGER.debug("Finding Customer by id: {}", customerId);
        try {
            return this.wmGenericDao.findById(customerId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Customer found with id: {}", customerId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquetTransactionManager")
	@Override
	public Customer update(Customer customer) throws EntityNotFoundException {
        LOGGER.debug("Updating Customer with information: {}", customer);

        List<Order> _orders = customer.get_orders();

        if(_orders != null && Hibernate.isInitialized(_orders)) {
            if(!_orders.isEmpty()) {
                for(Order _order : _orders) {
                    _order.setCustomer(customer);
                }
            }
        }

        this.wmGenericDao.update(customer);
        this.wmGenericDao.refresh(customer);

        return customer;
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public Customer delete(Integer customerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customer with id: {}", customerId);
        Customer deleted = this.wmGenericDao.findById(customerId);
        if (deleted == null) {
            LOGGER.debug("No Customer found with id: {}", customerId);
            throw new EntityNotFoundException(String.valueOf(customerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public void delete(Customer customer) {
        LOGGER.debug("Deleting Customer with {}", customer);
        this.wmGenericDao.delete(customer);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<Customer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet for table Customer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<Order> findAssociated_orders(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated _orders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customer.id = '" + id + "'");

        return orderService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrderService instance
	 */
	protected void setOrderService(OrderService service) {
        this.orderService = service;
    }

}


/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.Category;
import com.banquet.acs_banquet.Products;


/**
 * ServiceImpl object for domain model class Category.
 *
 * @see Category
 */
@Service("acs_banquet.CategoryService")
@Validated
public class CategoryServiceImpl implements CategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CategoryServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("acs_banquet.ProductsService")
	private ProductsService productsService;

    @Autowired
    @Qualifier("acs_banquet.CategoryDao")
    private WMGenericDao<Category, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Category, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquetTransactionManager")
    @Override
	public Category create(Category category) {
        LOGGER.debug("Creating a new Category with information: {}", category);

        Category categoryCreated = this.wmGenericDao.create(category);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(categoryCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Category getById(Integer categoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding Category by id: {}", categoryId);
        return this.wmGenericDao.findById(categoryId);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Category findById(Integer categoryId) {
        LOGGER.debug("Finding Category by id: {}", categoryId);
        try {
            return this.wmGenericDao.findById(categoryId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Category found with id: {}", categoryId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquetTransactionManager")
	@Override
	public Category update(Category category) throws EntityNotFoundException {
        LOGGER.debug("Updating Category with information: {}", category);

        List<Products> productses = category.getProductses();

        if(productses != null && Hibernate.isInitialized(productses)) {
            if(!productses.isEmpty()) {
                for(Products _products : productses) {
                    _products.setCategory(category);
                }
            }
        }

        this.wmGenericDao.update(category);
        this.wmGenericDao.refresh(category);

        return category;
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public Category delete(Integer categoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Category with id: {}", categoryId);
        Category deleted = this.wmGenericDao.findById(categoryId);
        if (deleted == null) {
            LOGGER.debug("No Category found with id: {}", categoryId);
            throw new EntityNotFoundException(String.valueOf(categoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public void delete(Category category) {
        LOGGER.debug("Deleting Category with {}", category);
        this.wmGenericDao.delete(category);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Page<Category> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Categories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<Category> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Categories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet for table Category to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<Products> findAssociatedProductses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated productses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("category.id = '" + id + "'");

        return productsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductsService instance
	 */
	protected void setProductsService(ProductsService service) {
        this.productsService = service;
    }

}


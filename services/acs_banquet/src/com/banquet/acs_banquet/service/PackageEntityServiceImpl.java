/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.PackageEntity;


/**
 * ServiceImpl object for domain model class PackageEntity.
 *
 * @see PackageEntity
 */
@Service("acs_banquet.PackageEntityService")
@Validated
public class PackageEntityServiceImpl implements PackageEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PackageEntityServiceImpl.class);


    @Autowired
    @Qualifier("acs_banquet.PackageEntityDao")
    private WMGenericDao<PackageEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PackageEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquetTransactionManager")
    @Override
	public PackageEntity create(PackageEntity packageEntity) {
        LOGGER.debug("Creating a new PackageEntity with information: {}", packageEntity);
        return this.wmGenericDao.create(packageEntity);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public PackageEntity getById(Integer packageentityId) throws EntityNotFoundException {
        LOGGER.debug("Finding PackageEntity by id: {}", packageentityId);
        PackageEntity packageEntity = this.wmGenericDao.findById(packageentityId);
        if (packageEntity == null){
            LOGGER.debug("No PackageEntity found with id: {}", packageentityId);
            throw new EntityNotFoundException(String.valueOf(packageentityId));
        }
        return packageEntity;
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public PackageEntity findById(Integer packageentityId) {
        LOGGER.debug("Finding PackageEntity by id: {}", packageentityId);
        return this.wmGenericDao.findById(packageentityId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquetTransactionManager")
	@Override
	public PackageEntity update(PackageEntity packageEntity) throws EntityNotFoundException {
        LOGGER.debug("Updating PackageEntity with information: {}", packageEntity);


        this.wmGenericDao.update(packageEntity);

        Integer packageentityId = packageEntity.getId();

        return this.wmGenericDao.findById(packageentityId);
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public PackageEntity delete(Integer packageentityId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PackageEntity with id: {}", packageentityId);
        PackageEntity deleted = this.wmGenericDao.findById(packageentityId);
        if (deleted == null) {
            LOGGER.debug("No PackageEntity found with id: {}", packageentityId);
            throw new EntityNotFoundException(String.valueOf(packageentityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Page<PackageEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PackageEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<PackageEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PackageEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet for table PackageEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


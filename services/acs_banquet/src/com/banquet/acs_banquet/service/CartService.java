/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.Cart;

/**
 * Service object for domain model class {@link Cart}.
 */
public interface CartService {

    /**
     * Creates a new Cart. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cart if any.
     *
     * @param cart Details of the Cart to be created; value cannot be null.
     * @return The newly created Cart.
     */
	Cart create(@Valid Cart cart);


	/**
	 * Returns Cart by given id if exists.
	 *
	 * @param cartId The id of the Cart to get; value cannot be null.
	 * @return Cart associated with the given cartId.
     * @throws EntityNotFoundException If no Cart is found.
	 */
	Cart getById(Integer cartId) throws EntityNotFoundException;

    /**
	 * Find and return the Cart by given id if exists, returns null otherwise.
	 *
	 * @param cartId The id of the Cart to get; value cannot be null.
	 * @return Cart associated with the given cartId.
	 */
	Cart findById(Integer cartId);


	/**
	 * Updates the details of an existing Cart. It replaces all fields of the existing Cart with the given cart.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Cart if any.
     *
	 * @param cart The details of the Cart to be updated; value cannot be null.
	 * @return The updated Cart.
	 * @throws EntityNotFoundException if no Cart is found with given input.
	 */
	Cart update(@Valid Cart cart) throws EntityNotFoundException;

    /**
	 * Deletes an existing Cart with the given id.
	 *
	 * @param cartId The id of the Cart to be deleted; value cannot be null.
	 * @return The deleted Cart.
	 * @throws EntityNotFoundException if no Cart found with the given id.
	 */
	Cart delete(Integer cartId) throws EntityNotFoundException;

    /**
	 * Deletes an existing Cart with the given object.
	 *
	 * @param cart The instance of the Cart to be deleted; value cannot be null.
	 */
	void delete(Cart cart);

	/**
	 * Find all Carts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Carts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Cart> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Carts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Carts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Cart> findAll(String query, Pageable pageable);

    /**
	 * Exports all Carts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Carts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Cart.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


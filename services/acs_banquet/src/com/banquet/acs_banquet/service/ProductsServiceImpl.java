/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.PackageEntity;
import com.banquet.acs_banquet.Products;


/**
 * ServiceImpl object for domain model class Products.
 *
 * @see Products
 */
@Service("acs_banquet.ProductsService")
@Validated
public class ProductsServiceImpl implements ProductsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("acs_banquet.PackageEntityService")
	private PackageEntityService packageEntityService;

    @Autowired
    @Qualifier("acs_banquet.ProductsDao")
    private WMGenericDao<Products, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Products, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquetTransactionManager")
    @Override
	public Products create(Products products) {
        LOGGER.debug("Creating a new Products with information: {}", products);
        return this.wmGenericDao.create(products);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Products getById(Integer productsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Products by id: {}", productsId);
        Products products = this.wmGenericDao.findById(productsId);
        if (products == null){
            LOGGER.debug("No Products found with id: {}", productsId);
            throw new EntityNotFoundException(String.valueOf(productsId));
        }
        return products;
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Products findById(Integer productsId) {
        LOGGER.debug("Finding Products by id: {}", productsId);
        return this.wmGenericDao.findById(productsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquetTransactionManager")
	@Override
	public Products update(Products products) throws EntityNotFoundException {
        LOGGER.debug("Updating Products with information: {}", products);

        if(products.getPackageEntitiesForProduct1() != null) {
            for(PackageEntity _packageEntity : products.getPackageEntitiesForProduct1()) {
                _packageEntity.setProductsByProduct1(products);
            }
        }
        if(products.getPackageEntitiesForProduct2() != null) {
            for(PackageEntity _packageEntity : products.getPackageEntitiesForProduct2()) {
                _packageEntity.setProductsByProduct2(products);
            }
        }
        if(products.getPackageEntitiesForProduct3() != null) {
            for(PackageEntity _packageEntity : products.getPackageEntitiesForProduct3()) {
                _packageEntity.setProductsByProduct3(products);
            }
        }
        if(products.getPackageEntitiesForProduct4() != null) {
            for(PackageEntity _packageEntity : products.getPackageEntitiesForProduct4()) {
                _packageEntity.setProductsByProduct4(products);
            }
        }
        if(products.getPackageEntitiesForProduct5() != null) {
            for(PackageEntity _packageEntity : products.getPackageEntitiesForProduct5()) {
                _packageEntity.setProductsByProduct5(products);
            }
        }

        this.wmGenericDao.update(products);

        Integer productsId = products.getId();

        return this.wmGenericDao.findById(productsId);
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public Products delete(Integer productsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Products with id: {}", productsId);
        Products deleted = this.wmGenericDao.findById(productsId);
        if (deleted == null) {
            LOGGER.debug("No Products found with id: {}", productsId);
            throw new EntityNotFoundException(String.valueOf(productsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Page<Products> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Products");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<Products> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Products");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet for table Products to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<PackageEntity> findAssociatedPackageEntitiesForProduct1(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated packageEntitiesForProduct1");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productsByProduct1.id = '" + id + "'");

        return packageEntityService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<PackageEntity> findAssociatedPackageEntitiesForProduct2(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated packageEntitiesForProduct2");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productsByProduct2.id = '" + id + "'");

        return packageEntityService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<PackageEntity> findAssociatedPackageEntitiesForProduct3(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated packageEntitiesForProduct3");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productsByProduct3.id = '" + id + "'");

        return packageEntityService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<PackageEntity> findAssociatedPackageEntitiesForProduct4(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated packageEntitiesForProduct4");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productsByProduct4.id = '" + id + "'");

        return packageEntityService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<PackageEntity> findAssociatedPackageEntitiesForProduct5(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated packageEntitiesForProduct5");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productsByProduct5.id = '" + id + "'");

        return packageEntityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PackageEntityService instance
	 */
	protected void setPackageEntityService(PackageEntityService service) {
        this.packageEntityService = service;
    }

}


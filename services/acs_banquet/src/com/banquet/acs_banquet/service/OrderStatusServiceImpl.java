/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.OrderStatus;


/**
 * ServiceImpl object for domain model class OrderStatus.
 *
 * @see OrderStatus
 */
@Service("acs_banquet.OrderStatusService")
@Validated
public class OrderStatusServiceImpl implements OrderStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderStatusServiceImpl.class);


    @Autowired
    @Qualifier("acs_banquet.OrderStatusDao")
    private WMGenericDao<OrderStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OrderStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acs_banquetTransactionManager")
    @Override
	public OrderStatus create(OrderStatus orderStatus) {
        LOGGER.debug("Creating a new OrderStatus with information: {}", orderStatus);

        OrderStatus orderStatusCreated = this.wmGenericDao.create(orderStatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(orderStatusCreated);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public OrderStatus getById(Integer orderstatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding OrderStatus by id: {}", orderstatusId);
        return this.wmGenericDao.findById(orderstatusId);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public OrderStatus findById(Integer orderstatusId) {
        LOGGER.debug("Finding OrderStatus by id: {}", orderstatusId);
        try {
            return this.wmGenericDao.findById(orderstatusId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No OrderStatus found with id: {}", orderstatusId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "acs_banquetTransactionManager")
	@Override
	public OrderStatus update(OrderStatus orderStatus) throws EntityNotFoundException {
        LOGGER.debug("Updating OrderStatus with information: {}", orderStatus);

        this.wmGenericDao.update(orderStatus);
        this.wmGenericDao.refresh(orderStatus);

        return orderStatus;
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public OrderStatus delete(Integer orderstatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OrderStatus with id: {}", orderstatusId);
        OrderStatus deleted = this.wmGenericDao.findById(orderstatusId);
        if (deleted == null) {
            LOGGER.debug("No OrderStatus found with id: {}", orderstatusId);
            throw new EntityNotFoundException(String.valueOf(orderstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acs_banquetTransactionManager")
	@Override
	public void delete(OrderStatus orderStatus) {
        LOGGER.debug("Deleting OrderStatus with {}", orderStatus);
        this.wmGenericDao.delete(orderStatus);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public Page<OrderStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OrderStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<OrderStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OrderStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acs_banquet for table OrderStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


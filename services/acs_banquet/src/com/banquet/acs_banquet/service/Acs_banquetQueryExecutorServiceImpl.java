/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/

package com.banquet.acs_banquet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.banquet.acs_banquet.models.query.*;

@Service
public class Acs_banquetQueryExecutorServiceImpl implements Acs_banquetQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Acs_banquetQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("acs_banquetWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<GetPackagePictResponse> executeGet_package_pict(List<Integer> productId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("product_id", productId);

        return queryExecutor.executeNamedQuery("get_package_pict", params, GetPackagePictResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public InputStream getPictContentForGet_package_pict(String pname, Integer prating, List<Integer> productId) throws EntityNotFoundException {
        Map params = new HashMap(1);

        params.put("pname", pname);
        params.put("prating", prating);
        params.put("product_id", productId);

        GetPackagePictResponse _result =  queryExecutor.executeNamedQuery("get_package_pict__identifier", params, GetPackagePictResponse.class);
        if(_result.getPict() == null) {
            LOGGER.debug("Blob content not exists for pict in query get_package_pict");
            throw new BlobContentNotFoundException("Blob content not found for pict in query get_package_pict");
        }
        return new ByteArrayInputStream(_result.getPict());
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable exportGet_package_pict(ExportType exportType, List<Integer> productId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("product_id", productId);

        return queryExecutor.exportNamedQueryData("get_package_pict", params, exportType, GetPackagePictResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<GetCat3ProductResponse> executeGet_cat_3_product(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("get_cat_3_product", params, GetCat3ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public InputStream getPpictureContentForGet_cat_3_product(Integer id, String pname, String pdescription, Integer prating, String catName) throws EntityNotFoundException {
        Map params = new HashMap(0);

        params.put("id", id);
        params.put("pname", pname);
        params.put("pdescription", pdescription);
        params.put("prating", prating);
        params.put("catName", catName);

        GetCat3ProductResponse _result =  queryExecutor.executeNamedQuery("get_cat_3_product__identifier", params, GetCat3ProductResponse.class);
        if(_result.getPpicture() == null) {
            LOGGER.debug("Blob content not exists for ppicture in query get_cat_3_product");
            throw new BlobContentNotFoundException("Blob content not found for ppicture in query get_cat_3_product");
        }
        return new ByteArrayInputStream(_result.getPpicture());
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable exportGet_cat_3_product(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("get_cat_3_product", params, exportType, GetCat3ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<GetCat1ProductResponse> executeGet_cat_1_product(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("get_cat_1_product", params, GetCat1ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public InputStream getPpictureContentForGet_cat_1_product(Integer id, String pname, String pdescription, Integer prating, String catName) throws EntityNotFoundException {
        Map params = new HashMap(0);

        params.put("id", id);
        params.put("pname", pname);
        params.put("pdescription", pdescription);
        params.put("prating", prating);
        params.put("catName", catName);

        GetCat1ProductResponse _result =  queryExecutor.executeNamedQuery("get_cat_1_product__identifier", params, GetCat1ProductResponse.class);
        if(_result.getPpicture() == null) {
            LOGGER.debug("Blob content not exists for ppicture in query get_cat_1_product");
            throw new BlobContentNotFoundException("Blob content not found for ppicture in query get_cat_1_product");
        }
        return new ByteArrayInputStream(_result.getPpicture());
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable exportGet_cat_1_product(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("get_cat_1_product", params, exportType, GetCat1ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<GetCat4ProductResponse> executeGet_cat_4_product(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("get_cat_4_product", params, GetCat4ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public InputStream getPpictureContentForGet_cat_4_product(Integer id, String pname, String pdescription, Integer prating, String catName) throws EntityNotFoundException {
        Map params = new HashMap(0);

        params.put("id", id);
        params.put("pname", pname);
        params.put("pdescription", pdescription);
        params.put("prating", prating);
        params.put("catName", catName);

        GetCat4ProductResponse _result =  queryExecutor.executeNamedQuery("get_cat_4_product__identifier", params, GetCat4ProductResponse.class);
        if(_result.getPpicture() == null) {
            LOGGER.debug("Blob content not exists for ppicture in query get_cat_4_product");
            throw new BlobContentNotFoundException("Blob content not found for ppicture in query get_cat_4_product");
        }
        return new ByteArrayInputStream(_result.getPpicture());
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable exportGet_cat_4_product(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("get_cat_4_product", params, exportType, GetCat4ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<GetCat2ProductResponse> executeGet_cat_2_product(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("get_cat_2_product", params, GetCat2ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public InputStream getPpictureContentForGet_cat_2_product(Integer id, String pname, String pdescription, Integer prating, String catName) throws EntityNotFoundException {
        Map params = new HashMap(0);

        params.put("id", id);
        params.put("pname", pname);
        params.put("pdescription", pdescription);
        params.put("prating", prating);
        params.put("catName", catName);

        GetCat2ProductResponse _result =  queryExecutor.executeNamedQuery("get_cat_2_product__identifier", params, GetCat2ProductResponse.class);
        if(_result.getPpicture() == null) {
            LOGGER.debug("Blob content not exists for ppicture in query get_cat_2_product");
            throw new BlobContentNotFoundException("Blob content not found for ppicture in query get_cat_2_product");
        }
        return new ByteArrayInputStream(_result.getPpicture());
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable exportGet_cat_2_product(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("get_cat_2_product", params, exportType, GetCat2ProductResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Page<GetProductPictureResponse> executeGet_product_picture(Integer prodId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("prod_id", prodId);

        return queryExecutor.executeNamedQuery("get_product_picture", params, GetProductPictureResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public InputStream getPpictureContentForGet_product_picture(String pname, Integer prodId) throws EntityNotFoundException {
        Map params = new HashMap(1);

        params.put("pname", pname);
        params.put("prod_id", prodId);

        GetProductPictureResponse _result =  queryExecutor.executeNamedQuery("get_product_picture__identifier", params, GetProductPictureResponse.class);
        if(_result.getPpicture() == null) {
            LOGGER.debug("Blob content not exists for ppicture in query get_product_picture");
            throw new BlobContentNotFoundException("Blob content not found for ppicture in query get_product_picture");
        }
        return new ByteArrayInputStream(_result.getPpicture());
    }

    @Transactional(readOnly = true, value = "acs_banquetTransactionManager")
    @Override
    public Downloadable exportGet_product_picture(ExportType exportType, Integer prodId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("prod_id", prodId);

        return queryExecutor.exportNamedQueryData("get_product_picture", params, exportType, GetProductPictureResponse.class, pageable);
    }

}



/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/
package com.banquet.acs_banquet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.banquet.acs_banquet.OrderItem;
import com.banquet.acs_banquet.PackageEntity;
import com.banquet.acs_banquet.PreOrder;
import com.banquet.acs_banquet.service.PackageEntityService;


/**
 * Controller object for domain model class PackageEntity.
 * @see PackageEntity
 */
@RestController("acs_banquet.PackageEntityController")
@Api(value = "PackageEntityController", description = "Exposes APIs to work with PackageEntity resource.")
@RequestMapping("/acs_banquet/PackageEntity")
public class PackageEntityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PackageEntityController.class);

    @Autowired
	@Qualifier("acs_banquet.PackageEntityService")
	private PackageEntityService packageEntityService;

	@ApiOperation(value = "Creates a new PackageEntity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PackageEntity createPackageEntity(@RequestBody PackageEntity packageEntity) {
		LOGGER.debug("Create PackageEntity with information: {}" , packageEntity);

		packageEntity = packageEntityService.create(packageEntity);
		LOGGER.debug("Created PackageEntity with information: {}" , packageEntity);

	    return packageEntity;
	}

    @ApiOperation(value = "Returns the PackageEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PackageEntity getPackageEntity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PackageEntity with id: {}" , id);

        PackageEntity foundPackageEntity = packageEntityService.getById(id);
        LOGGER.debug("PackageEntity details with id: {}" , foundPackageEntity);

        return foundPackageEntity;
    }

    @ApiOperation(value = "Updates the PackageEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PackageEntity editPackageEntity(@PathVariable("id") Integer id, @RequestBody PackageEntity packageEntity) throws EntityNotFoundException {
        LOGGER.debug("Editing PackageEntity with id: {}" , packageEntity.getId());

        packageEntity.setId(id);
        packageEntity = packageEntityService.update(packageEntity);
        LOGGER.debug("PackageEntity details with id: {}" , packageEntity);

        return packageEntity;
    }

    @ApiOperation(value = "Deletes the PackageEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePackageEntity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PackageEntity with id: {}" , id);

        PackageEntity deletedPackageEntity = packageEntityService.delete(id);

        return deletedPackageEntity != null;
    }

    /**
     * @deprecated Use {@link #findPackageEntities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PackageEntity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PackageEntity> searchPackageEntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PackageEntities list");
        return packageEntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PackageEntity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PackageEntity> findPackageEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PackageEntities list");
        return packageEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PackageEntity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PackageEntity> filterPackageEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PackageEntities list");
        return packageEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPackageEntities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return packageEntityService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PackageEntity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPackageEntities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PackageEntities");
		return packageEntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPackageEntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return packageEntityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/preOrders", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the preOrders instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PreOrder> findAssociatedPreOrders(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated preOrders");
        return packageEntityService.findAssociatedPreOrders(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/orderItems", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the orderItems instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OrderItem> findAssociatedOrderItems(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated orderItems");
        return packageEntityService.findAssociatedOrderItems(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PackageEntityService instance
	 */
	protected void setPackageEntityService(PackageEntityService service) {
		this.packageEntityService = service;
	}

}


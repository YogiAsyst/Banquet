/*Copyright (c) 2017-2018 asyst.co.id All Rights Reserved.
 This software is the confidential and proprietary information of asyst.co.id You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with asyst.co.id*/

package com.banquet.acs_banquet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.annotation.JsonView;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.banquet.acs_banquet.service.Acs_banquetQueryExecutorService;
import com.banquet.acs_banquet.models.query.*;

@RestController(value = "Acs_banquet.QueryExecutionController")
@RequestMapping("/acs_banquet/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Acs_banquetQueryExecutorService queryService;

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/get_package_pict", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get product picture from package")
    public Page<GetPackagePictResponse> executeGet_package_pict(@RequestParam(value = "product_id") List<Integer> productId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_package_pict");
        Page<GetPackagePictResponse> _result = queryService.executeGet_package_pict(productId, pageable);
        LOGGER.debug("got the result for named query: get_package_pict, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/composite-id/content/{_fieldName_}");
        _uriBuilder.queryParam("pname", "{pname}");
        _uriBuilder.queryParam("prating", "{prating}");
        for(GetPackagePictResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(3);
            _properties.put("pname", _content.getPname());
            _properties.put("prating", _content.getPrating());
            _properties.put("_fieldName_", "pict");
            if(_content.getPict() != null) {
                _content.setPict(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPict(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property pict in query get_package_pict")
    @RequestMapping(value = "/queries/get_package_pict/composite-id/content/pict", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPictContentForGet_package_pict(@RequestParam("pname") String pname, @RequestParam("prating") Integer prating, @RequestParam(value = "product_id") List<Integer> productId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_package_pict");

        InputStream _result = queryService.getPictContentForGet_package_pict(pname, prating, productId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query get_package_pict")
    @RequestMapping(value = "/queries/get_package_pict/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_package_pict(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "product_id") List<Integer> productId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: get_package_pict");

        return queryService.exportGet_package_pict(exportType, productId, pageable);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/get_cat_3_product", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get_cat_3_product")
    public Page<GetCat3ProductResponse> executeGet_cat_3_product(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_3_product");
        Page<GetCat3ProductResponse> _result = queryService.executeGet_cat_3_product(pageable);
        LOGGER.debug("got the result for named query: get_cat_3_product, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/composite-id/content/{_fieldName_}");
        _uriBuilder.queryParam("id", "{id}");
        _uriBuilder.queryParam("pname", "{pname}");
        _uriBuilder.queryParam("pdescription", "{pdescription}");
        _uriBuilder.queryParam("prating", "{prating}");
        _uriBuilder.queryParam("catName", "{catName}");
        for(GetCat3ProductResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(6);
            _properties.put("id", _content.getId());
            _properties.put("pname", _content.getPname());
            _properties.put("pdescription", _content.getPdescription());
            _properties.put("prating", _content.getPrating());
            _properties.put("catName", _content.getCatName());
            _properties.put("_fieldName_", "ppicture");
            if(_content.getPpicture() != null) {
                _content.setPpicture(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPpicture(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property ppicture in query get_cat_3_product")
    @RequestMapping(value = "/queries/get_cat_3_product/composite-id/content/ppicture", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPpictureContentForGet_cat_3_product(@RequestParam("id") Integer id, @RequestParam("pname") String pname, @RequestParam("pdescription") String pdescription, @RequestParam("prating") Integer prating, @RequestParam("catName") String catName, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_3_product");

        InputStream _result = queryService.getPpictureContentForGet_cat_3_product(id, pname, pdescription, prating, catName);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query get_cat_3_product")
    @RequestMapping(value = "/queries/get_cat_3_product/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_cat_3_product(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: get_cat_3_product");

        return queryService.exportGet_cat_3_product(exportType, pageable);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/get_cat_1_product", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get_cat_1_product")
    public Page<GetCat1ProductResponse> executeGet_cat_1_product(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_1_product");
        Page<GetCat1ProductResponse> _result = queryService.executeGet_cat_1_product(pageable);
        LOGGER.debug("got the result for named query: get_cat_1_product, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/composite-id/content/{_fieldName_}");
        _uriBuilder.queryParam("id", "{id}");
        _uriBuilder.queryParam("pname", "{pname}");
        _uriBuilder.queryParam("pdescription", "{pdescription}");
        _uriBuilder.queryParam("prating", "{prating}");
        _uriBuilder.queryParam("catName", "{catName}");
        for(GetCat1ProductResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(6);
            _properties.put("id", _content.getId());
            _properties.put("pname", _content.getPname());
            _properties.put("pdescription", _content.getPdescription());
            _properties.put("prating", _content.getPrating());
            _properties.put("catName", _content.getCatName());
            _properties.put("_fieldName_", "ppicture");
            if(_content.getPpicture() != null) {
                _content.setPpicture(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPpicture(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property ppicture in query get_cat_1_product")
    @RequestMapping(value = "/queries/get_cat_1_product/composite-id/content/ppicture", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPpictureContentForGet_cat_1_product(@RequestParam("id") Integer id, @RequestParam("pname") String pname, @RequestParam("pdescription") String pdescription, @RequestParam("prating") Integer prating, @RequestParam("catName") String catName, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_1_product");

        InputStream _result = queryService.getPpictureContentForGet_cat_1_product(id, pname, pdescription, prating, catName);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query get_cat_1_product")
    @RequestMapping(value = "/queries/get_cat_1_product/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_cat_1_product(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: get_cat_1_product");

        return queryService.exportGet_cat_1_product(exportType, pageable);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/get_cat_4_product", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get_cat_4_product")
    public Page<GetCat4ProductResponse> executeGet_cat_4_product(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_4_product");
        Page<GetCat4ProductResponse> _result = queryService.executeGet_cat_4_product(pageable);
        LOGGER.debug("got the result for named query: get_cat_4_product, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/composite-id/content/{_fieldName_}");
        _uriBuilder.queryParam("id", "{id}");
        _uriBuilder.queryParam("pname", "{pname}");
        _uriBuilder.queryParam("pdescription", "{pdescription}");
        _uriBuilder.queryParam("prating", "{prating}");
        _uriBuilder.queryParam("catName", "{catName}");
        for(GetCat4ProductResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(6);
            _properties.put("id", _content.getId());
            _properties.put("pname", _content.getPname());
            _properties.put("pdescription", _content.getPdescription());
            _properties.put("prating", _content.getPrating());
            _properties.put("catName", _content.getCatName());
            _properties.put("_fieldName_", "ppicture");
            if(_content.getPpicture() != null) {
                _content.setPpicture(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPpicture(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property ppicture in query get_cat_4_product")
    @RequestMapping(value = "/queries/get_cat_4_product/composite-id/content/ppicture", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPpictureContentForGet_cat_4_product(@RequestParam("id") Integer id, @RequestParam("pname") String pname, @RequestParam("pdescription") String pdescription, @RequestParam("prating") Integer prating, @RequestParam("catName") String catName, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_4_product");

        InputStream _result = queryService.getPpictureContentForGet_cat_4_product(id, pname, pdescription, prating, catName);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query get_cat_4_product")
    @RequestMapping(value = "/queries/get_cat_4_product/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_cat_4_product(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: get_cat_4_product");

        return queryService.exportGet_cat_4_product(exportType, pageable);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/get_cat_2_product", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get_cat_2_product")
    public Page<GetCat2ProductResponse> executeGet_cat_2_product(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_2_product");
        Page<GetCat2ProductResponse> _result = queryService.executeGet_cat_2_product(pageable);
        LOGGER.debug("got the result for named query: get_cat_2_product, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/composite-id/content/{_fieldName_}");
        _uriBuilder.queryParam("id", "{id}");
        _uriBuilder.queryParam("pname", "{pname}");
        _uriBuilder.queryParam("pdescription", "{pdescription}");
        _uriBuilder.queryParam("prating", "{prating}");
        _uriBuilder.queryParam("catName", "{catName}");
        for(GetCat2ProductResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(6);
            _properties.put("id", _content.getId());
            _properties.put("pname", _content.getPname());
            _properties.put("pdescription", _content.getPdescription());
            _properties.put("prating", _content.getPrating());
            _properties.put("catName", _content.getCatName());
            _properties.put("_fieldName_", "ppicture");
            if(_content.getPpicture() != null) {
                _content.setPpicture(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPpicture(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property ppicture in query get_cat_2_product")
    @RequestMapping(value = "/queries/get_cat_2_product/composite-id/content/ppicture", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPpictureContentForGet_cat_2_product(@RequestParam("id") Integer id, @RequestParam("pname") String pname, @RequestParam("pdescription") String pdescription, @RequestParam("prating") Integer prating, @RequestParam("catName") String catName, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: get_cat_2_product");

        InputStream _result = queryService.getPpictureContentForGet_cat_2_product(id, pname, pdescription, prating, catName);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query get_cat_2_product")
    @RequestMapping(value = "/queries/get_cat_2_product/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_cat_2_product(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: get_cat_2_product");

        return queryService.exportGet_cat_2_product(exportType, pageable);
    }

}


